<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Python笔试面试题</title>
  
  <subtitle>人生苦短，我用Python</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.codingonway.com/"/>
  <updated>2017-09-23T02:15:24.998Z</updated>
  <id>http://www.codingonway.com/</id>
  
  <author>
    <name>大师兄</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试题106 跳台阶、变态跳台阶问题</title>
    <link href="http://www.codingonway.com/python-recursive-and-iterator-problems.html"/>
    <id>http://www.codingonway.com/python-recursive-and-iterator-problems.html</id>
    <published>2017-09-23T01:53:57.000Z</published>
    <updated>2017-09-23T02:15:24.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跳台阶"><a href="#跳台阶" class="headerlink" title="跳台阶"></a>跳台阶</h2><p>问题描述：</p><blockquote><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p></blockquote><a id="more"></a><p>分析：<br>初始值很容易得到，当 n &gt; 2 时，跳上n级台阶最后一步无外乎两种情况，从第n-1级跳一级跳上来，或是从第n-2级跳两级跳上来，因此很容易得到如下递推公式。</p><blockquote><p>F（1）= 1<br>F（2）= 2<br>F（n）= F（n-1）+ F（n-2）（n &gt; 2）</p></blockquote><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jump_floor</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    prev, curr = <span class="number">1</span>, <span class="number">2</span></div><div class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1</span>, n):</div><div class="line">        prev, curr = curr, prev+curr</div><div class="line">    <span class="keyword">return</span> prev</div></pre></td></tr></table></figure></p><h2 id="变态跳台阶"><a href="#变态跳台阶" class="headerlink" title="变态跳台阶"></a>变态跳台阶</h2><p>问题描述：</p><blockquote><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p></blockquote><p>分析：<br>相比普通跳台阶，这次青蛙一次可以跳任意级，基于上述思路，很容易得到如下递推公式。</p><blockquote><p>F（1）= 1<br>F（2）= 2<br>F（n）= F（n-1）+ F（n-2）+ … + F（2）+ F（1）+ 1 = 2 **（n-1）</p></blockquote><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jump_floor</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    <span class="keyword">return</span> <span class="number">2</span>**(n<span class="number">-1</span>)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;跳台阶&quot;&gt;&lt;a href=&quot;#跳台阶&quot; class=&quot;headerlink&quot; title=&quot;跳台阶&quot;&gt;&lt;/a&gt;跳台阶&lt;/h2&gt;&lt;p&gt;问题描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构和算法" scheme="http://www.codingonway.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="递归和循环" scheme="http://www.codingonway.com/tags/%E9%80%92%E5%BD%92%E5%92%8C%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>面试题105 数值取整(四舍五入、向上取整、向下取整、向0取整)</title>
    <link href="http://www.codingonway.com/python-convert-number-to-integer.html"/>
    <id>http://www.codingonway.com/python-convert-number-to-integer.html</id>
    <published>2017-09-21T09:30:20.000Z</published>
    <updated>2017-09-21T09:53:31.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数值取整"><a href="#数值取整" class="headerlink" title="数值取整"></a>数值取整</h2><blockquote><p>四舍五入：内置函数round()<br>向零取整：内置函数int()<br>向上取整：math模块中的math.ceil()<br>向下取整：math模块中的math.floor()</p></blockquote><a id="more"></a><h2 id="四舍五入"><a href="#四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">3.2</span>)</div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">-3.8</span>)</div><div class="line"><span class="number">-4</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><p>同时，round()函数向偶取整，即：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">0.5</span>)</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">-0.5</span>)</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">1.5</span>)</div><div class="line"><span class="number">2</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p><p>注意，在Python2中round()函数返回浮点数，在Python3中返回整数。</p><h2 id="向0取整"><a href="#向0取整" class="headerlink" title="向0取整"></a>向0取整</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">3.2</span>)</div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">-3.8</span>)</div><div class="line"><span class="number">-3</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><h2 id="向上取整"><a href="#向上取整" class="headerlink" title="向上取整"></a>向上取整</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>math.ceil(<span class="number">3.2</span>)</div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>math.ceil(<span class="number">-3.8</span>)</div><div class="line"><span class="number">-3</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><h2 id="向下取整"><a href="#向下取整" class="headerlink" title="向下取整"></a>向下取整</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>math.floor(<span class="number">3.8</span>)</div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>math.floor(<span class="number">-3.2</span>)</div><div class="line"><span class="number">-4</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数值取整&quot;&gt;&lt;a href=&quot;#数值取整&quot; class=&quot;headerlink&quot; title=&quot;数值取整&quot;&gt;&lt;/a&gt;数值取整&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;四舍五入：内置函数round()&lt;br&gt;向零取整：内置函数int()&lt;br&gt;向上取整：math模块中的math.ceil()&lt;br&gt;向下取整：math模块中的math.floor()&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="基础数据类型" scheme="http://www.codingonway.com/categories/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
      <category term="数字" scheme="http://www.codingonway.com/tags/%E6%95%B0%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>面试题104 反转字符串、元组、列表等序列类型</title>
    <link href="http://www.codingonway.com/reverse-sequence-type-str-tuple-list-in-python.html"/>
    <id>http://www.codingonway.com/reverse-sequence-type-str-tuple-list-in-python.html</id>
    <published>2017-09-21T06:41:21.000Z</published>
    <updated>2017-09-21T07:00:55.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Python中如何反转序列类型，比如反转常见序列类型字符串、元组、列表等？<br><a id="more"></a></p><h2 id="reversed-seq-内置函数"><a href="#reversed-seq-内置函数" class="headerlink" title="reversed(seq)内置函数"></a>reversed(seq)内置函数</h2><p>reversed(seq)内置函数用于将序列反转，返回一个迭代器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># reverse list</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x  = list(reversed(l))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x</div><div class="line">[<span class="string">'C'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>]</div><div class="line"></div><div class="line"><span class="comment"># reverse tuple</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y = tuple(reversed(t))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y</div><div class="line">(<span class="string">'C'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>)</div><div class="line"></div><div class="line"><span class="comment"># reverse str</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'ABC'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z = <span class="string">''</span>.join(reversed(s))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z</div><div class="line"><span class="string">'CBA'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p><p>注意一点，reversed(seq)函数并没有改变seq序列本身，如需改动seq序列本身，将结果赋值给seq即可。以列表为例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># reverse list in place</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l  = list(reversed(l))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l</div><div class="line">[<span class="string">'C'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>]</div></pre></td></tr></table></figure></p><h2 id="使用切片操作-1"><a href="#使用切片操作-1" class="headerlink" title="使用切片操作[::-1]"></a>使用切片操作[::-1]</h2><p>切片用法<code>[&lt;start&gt;:&lt;end&gt;:&lt;step&gt;]</code>，其中start默认值是0，end默认值是len(seq)，step默认值是1。此处省略了start和end，步长为-1代表反向切片（从右向左每次前进1步）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># reverse list</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = l[::<span class="number">-1</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x</div><div class="line">[<span class="string">'C'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>]</div><div class="line"></div><div class="line"><span class="comment"># reverse tuple</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y = t[::<span class="number">-1</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y</div><div class="line">(<span class="string">'C'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>)</div><div class="line"></div><div class="line"><span class="comment"># reverse str</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'ABC'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z = s[::<span class="number">-1</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>z</div><div class="line"><span class="string">'CBA'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p><p>由于切片操作返回的是与序列类型相同的新对象，也不会改变原始的序列，如需改变，将结果赋值原始序列。以字符串为例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># reverse str in place</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'ABC'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = s[::<span class="number">-1</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line"><span class="string">'CBA'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p><h2 id="列表的原地反转reverse-方法"><a href="#列表的原地反转reverse-方法" class="headerlink" title="列表的原地反转reverse()方法"></a>列表的原地反转reverse()方法</h2><p>由于列表是可变对象，其reverse()方法可以原地反转列表中元素，无返回值或者说是返回None（如果一个函数或方法对对象进行的是就地改动，那它就应该返回None，好让调用者知道传入的参数发生了变动，而且并未产生新的对象。例如，random.shuffle函数也遵守了这个惯例。），元组和字符串都是不可变对象，因此都没有reverse()方法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># reverse list in place</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l.reverse()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l</div><div class="line">[<span class="string">'C'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;Python中如何反转序列类型，比如反转常见序列类型字符串、元组、列表等？&lt;br&gt;
    
    </summary>
    
      <category term="基础数据类型" scheme="http://www.codingonway.com/categories/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
      <category term="序列" scheme="http://www.codingonway.com/tags/%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>面试题103 求斐波那契数列的第n项</title>
    <link href="http://www.codingonway.com/python-get-fibonacci-n-number.html"/>
    <id>http://www.codingonway.com/python-get-fibonacci-n-number.html</id>
    <published>2017-09-20T09:10:36.000Z</published>
    <updated>2017-09-20T09:23:26.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>求斐波那契数列的第n项，要求时间复杂度<code>O(n)</code>，空间复杂度<code>O(1)</code>。<br>在数学上，费波那契数列是以递归的方法来定义：</p><blockquote><p>F（0）= 0<br>F（1）= 1<br>F（n）= F（n-1）+ F（n-2） （n &gt;= 2）</p></blockquote><p><strong>特别指出</strong>：0不是第一项，而是第零项。<br><a id="more"></a></p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归的方法虽然简明清晰，但是开销太大，效率太低，会有大量的重复计算。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Fibonacci</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> n</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> Fibonacci(n<span class="number">-1</span>) + Fibonacci(n<span class="number">-2</span>)</div></pre></td></tr></table></figure></p><h2 id="递归的优化版本"><a href="#递归的优化版本" class="headerlink" title="递归的优化版本"></a>递归的优化版本</h2><p>优化版本的递归，把每次计算过的值都保存在字典中，避免大量重复计算。但却需要一个额外的辅助字典（空间复杂度<code>O(n)</code>）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">known = &#123;<span class="number">0</span>:<span class="number">0</span>, <span class="number">1</span>:<span class="number">1</span>&#125;</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Fibonacci</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n <span class="keyword">not</span> <span class="keyword">in</span> known:</div><div class="line">        known[n] = Fibonacci(n<span class="number">-1</span>) + Fibonacci(n<span class="number">-2</span>)</div><div class="line">    <span class="keyword">return</span> known[n]</div></pre></td></tr></table></figure></p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>能用递归解决的问题在优化上的思路必然要考虑循环，而且用循环实现，效率高，开销小。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Fibonacci</span><span class="params">(n)</span>:</span></div><div class="line">    prev, curr = <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(n):</div><div class="line">        prev, curr = curr, prev+curr</div><div class="line">    <span class="keyword">return</span> prev</div></pre></td></tr></table></figure></p><p>此方法时间复杂度<code>O(n)</code>，空间复杂度<code>O(1)</code>，是最佳的解决方案。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;求斐波那契数列的第n项，要求时间复杂度&lt;code&gt;O(n)&lt;/code&gt;，空间复杂度&lt;code&gt;O(1)&lt;/code&gt;。&lt;br&gt;在数学上，费波那契数列是以递归的方法来定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;F（0）= 0&lt;br&gt;F（1）= 1&lt;br&gt;F（n）= F（n-1）+ F（n-2） （n &amp;gt;= 2）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;特别指出&lt;/strong&gt;：0不是第一项，而是第零项。&lt;br&gt;
    
    </summary>
    
      <category term="数据结构和算法" scheme="http://www.codingonway.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="递归和循环" scheme="http://www.codingonway.com/tags/%E9%80%92%E5%BD%92%E5%92%8C%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>面试题102 矩阵转置(二维列表行列互换)</title>
    <link href="http://www.codingonway.com/matrix-transpose-in-python.html"/>
    <id>http://www.codingonway.com/matrix-transpose-in-python.html</id>
    <published>2017-09-19T10:54:16.000Z</published>
    <updated>2017-09-19T13:44:00.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>有二维列表如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]]</div></pre></td></tr></table></figure></p><p>转置（行列互换）后的结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>], [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>]]</div></pre></td></tr></table></figure></p><a id="more"></a><h2 id="嵌套的列表推导式"><a href="#嵌套的列表推导式" class="headerlink" title="嵌套的列表推导式"></a>嵌套的列表推导式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>matrix_t = [[row[col] <span class="keyword">for</span> row <span class="keyword">in</span> matrix] <span class="keyword">for</span> col <span class="keyword">in</span> range(len(matrix[<span class="number">0</span>]))]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>matrix_t</div><div class="line">[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>], [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>]]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><p>原理很简单：先循环列，在固定列上循环每一行。</p><h2 id="zip迭代-map映射"><a href="#zip迭代-map映射" class="headerlink" title="zip迭代 + map映射"></a>zip迭代 + map映射</h2><p>在 Python2 中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>matrix_t = map(list, zip(*matrix))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>matrix_t</div><div class="line">[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>], [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>]]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p><p>如在 Python3 中，map函数返回的是迭代器不是列表，将结果用list函数构造成列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>matrix_t = list(map(list, zip(*matrix)))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>matrix_t</div><div class="line">[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>], [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>]]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p><p>原理也很清晰：先用zip并行迭代每一个列表，然后再用map将迭代后的元组转成列表。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;有二维列表如下：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;matrix = [[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;]]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;转置（行列互换）后的结果如下：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;]]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="基础数据类型" scheme="http://www.codingonway.com/categories/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
      <category term="列表" scheme="http://www.codingonway.com/tags/%E5%88%97%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>面试题101 交换字典的键和值</title>
    <link href="http://www.codingonway.com/swap-dict-keys-and-values.html"/>
    <id>http://www.codingonway.com/swap-dict-keys-and-values.html</id>
    <published>2017-09-19T03:11:16.000Z</published>
    <updated>2017-09-19T13:43:53.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>如何交换字典的键和值？有如下字典：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="string">'A'</span> : <span class="number">1</span>, <span class="string">'B'</span> : <span class="number">2</span>, <span class="string">'C'</span> : <span class="number">3</span>&#125;</div></pre></td></tr></table></figure></p><p>交换后的结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="number">1</span>: <span class="string">'A'</span>, <span class="number">2</span>: <span class="string">'B'</span>, <span class="number">3</span>: <span class="string">'C'</span>&#125;</div></pre></td></tr></table></figure></p><a id="more"></a><h2 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'A'</span> : <span class="number">1</span>, <span class="string">'B'</span> : <span class="number">2</span>, <span class="string">'C'</span> : <span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;v:k <span class="keyword">for</span> k,v <span class="keyword">in</span> d.items()&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d1</div><div class="line">&#123;<span class="number">1</span>: <span class="string">'A'</span>, <span class="number">2</span>: <span class="string">'B'</span>, <span class="number">3</span>: <span class="string">'C'</span>&#125;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><h2 id="生成器表达式-dict"><a href="#生成器表达式-dict" class="headerlink" title="生成器表达式 + dict()"></a>生成器表达式 + dict()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'A'</span> : <span class="number">1</span>, <span class="string">'B'</span> : <span class="number">2</span>, <span class="string">'C'</span> : <span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d2 = dict((v,k) <span class="keyword">for</span> k,v <span class="keyword">in</span> d.items())</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d2</div><div class="line">&#123;<span class="number">1</span>: <span class="string">'A'</span>, <span class="number">2</span>: <span class="string">'B'</span>, <span class="number">3</span>: <span class="string">'C'</span>&#125;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><h2 id="zip-dict"><a href="#zip-dict" class="headerlink" title="zip() + dict()"></a>zip() + dict()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'A'</span> : <span class="number">1</span>, <span class="string">'B'</span> : <span class="number">2</span>, <span class="string">'C'</span> : <span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d3 = dict(zip(d.values(), d.keys()))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d3</div><div class="line">&#123;<span class="number">1</span>: <span class="string">'A'</span>, <span class="number">2</span>: <span class="string">'B'</span>, <span class="number">3</span>: <span class="string">'C'</span>&#125;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><p>字典中的键必须是可哈希的不可变对象，值可以是任意对象。因此交换字典的键和值可能会有两种意外情况。<br>无法交换字典的键和值，原因是字典的值是不可哈希的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'A'</span> : <span class="number">1</span>, <span class="string">'B'</span> : [<span class="number">2</span>], <span class="string">'C'</span> : <span class="number">3</span> &#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d4 = &#123;v:k <span class="keyword">for</span> k,v <span class="keyword">in</span> d.items()&#125;</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;dictcomp&gt;</div><div class="line">TypeError: unhashable type: <span class="string">'list'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p><p>交换后字典元素数变少，原因是有重复值，字典的键具有唯一性。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'A'</span> : <span class="number">1</span>, <span class="string">'B'</span> : <span class="number">1</span>, <span class="string">'C'</span> : <span class="number">1</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d5 = &#123;v:k <span class="keyword">for</span> k,v <span class="keyword">in</span> d.items()&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d5</div><div class="line">&#123;<span class="number">1</span>: <span class="string">'B'</span>&#125;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;如何交换字典的键和值？有如下字典：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;d = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;交换后的结果如下：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="基础数据类型" scheme="http://www.codingonway.com/categories/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
      <category term="字典" scheme="http://www.codingonway.com/tags/%E5%AD%97%E5%85%B8/"/>
    
  </entry>
  
</feed>
